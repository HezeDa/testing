import { Metadata } from "next"
import { notFound } from "next/navigation"
import { pool } from "@/lib/db"
import PropertyDetails from "@/components/property-details"

interface PropertyPageProps {
  params: {
    slug: string
  }
}

export async function generateMetadata(
  { params }: { params: { slug: string } }
): Promise<Metadata> {
  const { slug } = await params

  try {
    const result = await pool.query(
      `SELECT p.title, p.description, pi.url as featured_image
       FROM properties p
       LEFT JOIN property_images pi ON p.id = pi.property_id AND pi.is_primary = true
       WHERE p.slug = $1`,
      [slug]
    )

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', {
      slug,
      found: result.rows.length > 0,
      rowCount: result.rows.length 
    })

    if (result.rows.length === 0) {
      console.log('‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return {
        title: "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        description: "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
      }
    }

    const property = result.rows[0]
    console.log('‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', property)

    return {
      title: property.title,
      description: property.description,
      openGraph: {
        title: property.title,
        description: property.description,
        images: property.featured_image ? [property.featured_image] : [],
      },
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:", error)
    return {
      title: "–û—à–∏–±–∫–∞",
      description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–∞"
    }
  }
}

export default async function PropertyPage({ params }: PropertyPageProps) {
  console.log('üìÑ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–∫—Ç–∞')
  console.log('üìå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { slug: params.slug })
  
  try {
    const result = await pool.query(
      `SELECT 
        p.*,
        json_agg(
          json_build_object(
            'id', pi.id,
            'url', pi.url,
            'alt', pi.alt,
            'is_primary', pi.is_primary
          )
        ) as images
       FROM properties p
       LEFT JOIN property_images pi ON p.id = pi.property_id
       WHERE p.slug = $1
       GROUP BY p.id`,
      [params.slug]
    )

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—ä–µ–∫—Ç–∞:', { 
      found: result.rows.length > 0,
      rowCount: result.rows.length 
    })

    if (result.rows.length === 0) {
      console.log('‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
      notFound()
    }

    const property = result.rows[0]
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
    property.images = property.images.filter((img: { id: number | null }) => img.id !== null)
    console.log('‚úÖ –û–±—ä–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω:', property)

    return (
      <div className="py-8 md:py-12">
        <div className="container">
          <PropertyDetails property={property} />
        </div>
      </div>
    )
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–∞:", error)
    throw error
  }
}
